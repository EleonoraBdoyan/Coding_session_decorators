# Գրել text_decor դեկորատոր, որը «զարդարում է» ֆունկցիայի կանչը “Hello” և “Goodbye!” արտահայտություններով.
# կանչից առաջ տպվում է “Hello” արտահայտությունը, կանչից հետո՝ “Goodbye!”։

def text_decor(func):
    def wrapper(*args,**kwargs):
        print("Hello")
        func(*args,**kwargs)
        print("Goodbye")
    return wrapper


@text_decor
def simple_func():
    print("I’m doing something")

simple_func()



#Գրել repeater դեկորատոր, որը երկու անգամ կանչում է փոխանցված ֆունկցիան։

def repeater(func):
    def wrapper(*args,**kwargs):
        func(*args,**kwargs)
        func(*args,**kwargs)
    return wrapper


@repeater
def multiply(num1, num2):
    print(num1 * num2)

multiply(2, 7)



def double_it(func):
    def wrapper(*args,**kwargs):
        return 2 * func(*args,**kwargs)
    return wrapper

@double_it
def get_sum(*args):
    return sum(args)

@double_it
def multiply(num1, num2):
    return num1 * num2

print(multiply(9,4))


# Գրել add_args դեկորատոր, որը  փոխանցված արգումենտներին ավելացնում է ևս երկու արժեք՝ "begin" սկզբից և
# "end" վերջից: Դեկորատորը պետք է պահպանի նաև փոխանցված ֆունկցիայի սկզբնական անվանումը և docstring֊ը։

import functools

def add_args(func):
    @functools.wraps(func)
    def wrapper(*args):
        args = list(args)
        args = tuple(["begin"] + args +["end"])
        return func(*args)
    return wrapper


@add_args
def concatenate(*args):
	"""
	Returns the concatenation of given strings
	"""
	return ', '.join(args)


@add_args
def find_max_word(*args):
	"""
	Returns the word with maximum length
	"""
	return max(args, key=len)

print(concatenate('hello', 'world', 'my', 'name is', 'Jane'))
assert concatenate('hello', 'world', 'my', 'name is', 'Jane') == 'begin, hello, world, my, name is, Jane, end'
assert concatenate('my', 'name is', 'Artem') == 'begin, my, name is, Artem, end'
assert concatenate.__name__ == 'concatenate'
assert concatenate.__doc__.strip() == """Returns the concatenation of given strings"""
assert find_max_word('my') == 'begin'
assert find_max_word('my', 'how') == 'begin'
assert find_max_word('my', 'how', 'maximum') == 'maximum'
assert find_max_word.__name__ == 'find_max_word'
assert find_max_word.__doc__.strip() == """Returns the word with maximum length"""


#Գրել validate_args դեկորատոր, որը վավերացնում է փոխանցված արգումենտները: Արգումենտները պետք է ստուգվեն
# հետևյալ կերպ․
# 
# Պետք է փոխացվի ուղիղ երկու արգումենտ։ Եթե փոխանցված արգումենտների քանակը երկուսից քիչ է, դեկորատորը պետք
# է վերադարձնի “Not enough arguments” ։ Եթե փոխանցված արգումենտների քանակը երկուսից ավել է, դեկորատորը պետք է
# վերադարձնի “Too many arguments” ։
# 
# Երկու արգումենտները պետք է լինեն ամբողջ թվեր: Եթե ​​դրանցից գոնե մեկը ամբողջ թիվ չէ, դեկորատորը պետք
# է վերադարձնի “Wrong types” ։
# Բոլոր ստուգումները տրված հերթականությամբ անցնելուց հետո, վերադարձրեք փոխանցված  ֆունկցիայի արդյուքը։
# Ստորև բերված են օգտագործման օրինակներ․


def validate_args(func):
    def wrapper(*args):
        if len(args) < 2:
            return "Not enough arguments"
        if len(args) > 2:
            return "Too many arguments"
        else:
            if all(isinstance(i,int) for i in args):
                return func(*args)
        return "Wrong types"
    return wrapper

@validate_args
def add_numbers(x, y):
	"""Return sum of x and y"""
	return x + y


assert add_numbers(4, 5) == 9
assert add_numbers(4) == 'Not enough arguments'
assert add_numbers() == 'Not enough arguments'
assert add_numbers('hello') == 'Not enough arguments'
assert add_numbers(3, 5, 6) == 'Too many arguments'
assert add_numbers('a', 'b', 'c') == 'Too many arguments'
assert add_numbers(4.5, 5.1) == 'Wrong types'
assert add_numbers('hello', 4) == 'Wrong types'
assert add_numbers(9, 'hello') == 'Wrong types'
assert add_numbers([1, 3], {}) == 'Wrong types'


